@page "/clientside"

<PageTitle>Client-side C# | The Blazor Act</PageTitle>

<h3>Writing client-side C# code</h3>

<Pin InnerText="The UI is rendered as HTML and CSS for wide browser support, including mobile browsers."></Pin>

<table class="table table-hover align-middle">
  <thead>
    <tr>
      <th scope="col">#</th>
      <th scope="col">Feature</th>
      <th scope="col">Description</th>
      <th scope="col">Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">1</th>
      <td>Hosting model</td>
      <td>Blazor WebAssembly (WASM) apps run client-side in the browser on a WebAssembly-based .NET runtime.</td>
      <td><a class="btn btn-link" href="#">Show me more</a></td>
    </tr>
    <tr>
      <th scope="row">2</th>
      <td>Compilation</td>
      <td>Blazor WebAssembly supports ahead-of-time (AOT) compilation, where you can compile your .NET code directly into WebAssembly.</td>
      <td><a class="btn btn-link" href="#">Show me more</a></td>
    </tr>
    <tr>
      <th scope="row">3</th>
      <td>Project structure</td>
      <td>The Blazor WebAssembly template creates the initial files and directory structure for a Blazor WebAssembly app.</td>
      <td><a class="btn btn-link" href="#">Show me more</a></td>
    </tr>
    <tr>
      <th scope="row">4</th>
      <td>Razor components</td>
      <td>Blazor apps are based on Razor components, which are a self-contained portion of user interface (UI) with processing logic to enable dynamic behavior.</td>
      <td><a class="btn btn-link" href="#">Show me more</a></td>
    </tr>
    <tr>
      <th scope="row">5</th>
      <td>JavaScript interop</td>
      <td>Blazor apps can invoke JavaScript (JS) functions from .NET methods and .NET methods from JS functions.</td>
      <td><a class="btn btn-link" href="#">Show me more</a></td>
    </tr>
  </tbody>
</table>

<Offcanvas/>

@code {
    
}