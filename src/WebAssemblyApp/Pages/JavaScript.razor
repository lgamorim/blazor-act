@page "/javascript"
@implements IDisposable

<PageTitle>JavaScript | The Blazor Act</PageTitle>

<h3>Interoperability with JavaScript</h3>

<Pin InnerText="A Blazor app can invoke JavaScript (JS) functions from .NET methods and .NET methods from JS functions."></Pin>

<ul class="nav nav-tabs" id="interop" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="invoke-js-tab" data-bs-toggle="tab" data-bs-target="#invoke-js" type="button" role="tab" aria-controls="invoke-js" aria-selected="true">Invoking JS within .NET</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="invoke-dotnet-tab" data-bs-toggle="tab" data-bs-target="#invoke-dotnet" type="button" role="tab" aria-controls="invoke-dotnet" aria-selected="false">Invoking .NET within JS</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="interop-playground-tab" data-bs-toggle="tab" data-bs-target="#interop-playground" type="button" role="tab" aria-controls="interop-playground" aria-selected="false">Interop Playground</button>
  </li>
</ul>

<div class="tab-content">
  <div class="tab-pane fade show active" id="invoke-js" role="tabpanel" aria-labelledby="invoke-js-tab">
    <div class="card border-top-0">
      <div class="card-body">
        <p>To call JavaScript functions from .NET methods in ASP.NET Core Blazor, inject the <code>IJSRuntime</code> abstraction and call one of the following methods:</p>
        <ul>
          <li>
            <code>JSRuntime.InvokeAsync</code>
          </li>
          <li>
            <code>JSRuntimeExtensions.InvokeAsync</code>
          </li>
          <li>
            <code>JSRuntimeExtensions.InvokeVoidAsync</code>
          </li>
        </ul>
      </div>
    </div>
  </div>
  <div class="tab-pane fade" id="invoke-dotnet" role="tabpanel" aria-labelledby="invoke-dotnet-tab">
    <div class="card border-top-0">
      <div class="card-body">
        <p>To call .NET <strong>static</strong> methods from JavaScript functions in ASP.NET Core Blazor, use the JS functions <code>DotNet.invokeMethod</code> or <code>DotNet.invokeMethodAsync</code>.</p>
        <p>Pass in the name of the assembly containing the method, the identifier of the static .NET method, and any arguments.</p>
        <hr/>
        <p>To call .NET <strong>instance</strong> methods from JavaScript functions in ASP.NET Core Blazor:</p>
        <ul>
          <li>
            Pass the .NET instance by reference to JS by wrapping the instance in a <code>DotNetObjectReference</code> and calling <code>Create</code> on it.
          </li>
          <li>
            Invoke a .NET instance method from JS using <code>invokeMethod</code> or <code>invokeMethodAsync</code> from the passed <code>DotNetObjectReference</code>.
          </li>
          <li>
            Dispose of the <code>DotNetObjectReference</code>.
          </li>
        </ul>
      </div>
    </div>
  </div>
  <div class="tab-pane fade" id="interop-playground" role="tabpanel" aria-labelledby="interop-playground-tab">
    <div class="card border-top-0">
      <div class="card-body">
        <p>The following example calls <em><b>1)</b></em> the <code>GetMarketData</code> .NET method from JS, and <em><b>2)</b></em> the <code>displayChart</code> JS function from .NET!</p>
        <form>
          <div class="row">
            <div class="col-md-2 mb-3">
              <input type="text" class="form-control" id="fc-coin" placeholder="Coin">
            </div>
            <div class="col-md-1 mb-3">
              <input type="text" class="form-control" id="fc-currency" placeholder="Currency">
            </div>
            <div class="col-auto mb-3">
              <button class="btn btn-outline-primary" type="button" @onclick="SetupCallCoinGeckoApiReference">Interop, Rise!</button>
            </div>
          </div>
        </form>
        <div class="row mt-2">
          <canvas id="interop-chart" @ref="interopChart"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>

<Offcanvas/>

@code {
  private DotNetObjectReference<JavaScript> dotNetRef;

  private async Task SetupCallCoinGeckoApiReference()
  {
    dotNetRef = DotNetObjectReference.Create(this);
    await JS.InvokeVoidAsync("callCoinGeckoApi", dotNetRef);
  }

  public void Dispose()
  {
    dotNetRef?.Dispose();
  }
}